---------------------------------------
REACT : Advanced frontend technology
---------------------------------------

1. Basic concepts
  - React application is a collection of different libraries
  - React application consists of different COMPONENTS, which used to display contents in browser, in react application , all the components are arranged in tree structure. tree structure has a single parent/root node which is by default known as "App Components". Components are reusable.
  - Pure JS Functions to built the components, it returns how to display contents in browser. pure functions are capable of doing only one task with the help of its arguments. Function without side effects.
  - Declarative Approach
  - Virtual DOM: light weight representation of real DOM.
  - Babel Library : used to display contents in to browser.
  - JSX (JAVASCRIPT XML) : JS Extension for writing html code in Javascript used to display contents in browser.
    - JSX element : eg- const heading = <h1>Heading</h1>
    - Rules for JSX :
      - Every JSX elements must be inside a single tag. parent tag can any container tags(eg: div,section,article...) or react fragments (<></>) tag without name is known as fragments.
      - Every JSX code must have a closing tag. if a tag does not has content: <starting tag> </ending tag>
          self closing tags: <starting tag/>
      - Instead of Attribute "class" use "className" in JSX
      - Instead of Attribute "for" use "htmlFor" in JSX
      - In JSX, we can directly pass js code inside a curly braces. eg: {js code}
2. React APP Creation
  - CRA ( using create-react-app command )
  - Vite : tool used to building web application.
    -Install vite globally : npm i -g create-vite
    - React app creation using vite: npm create vite@latest reactAppName -- --template react
    - to run vite react project : use command "npm run dev"
3. Files and folders structure if react application using vite
  - package.json file : npm configuration file for the project
  - package-lock.json : used to hold version of dependent package of the project.
  - node_modules folder : used to locally store dependent packages of project, we can generate node_modules folder with help of command "npm Install"
  - public folder : used to hold data that can be accessed by any part of the project.
  - index.html : entry point of react project application, react application will display in index.html
  - src folder : logic of the react app is defined
    - main.jsx : used to render ( display in browser ) react app in html elements with id as "root"
      - createRoot () : createRoot lets you create a root to display react component inside a browser DOM node.
    - css file : used to define styles for all components in react app
    - App.jsx file : used to create react root component
    - assets folder : used to hold media files used in react project
4. Components : used to display content in browser, to create component create a js/jsx file with filename start with capital letter
  - create react components in 2 types
    - Functional based components/ stateless components : used JS pure functions to build components,function name must similar to its file name. function must return jsx code
    - Class based components/ statefull : uses class to create component. class inherits react component class. render method in class used to return jsx.
        - To create STATE. it has to call super method in its constructor to gets its parents features. state is an object, where we can store value as key-value pairs, to update the state use a predefined method setState() pass it arguments as update value of state.
  - Life cycle methods of react components
      - Mounting phase : putting JSX into DOM
          - constructor()
          - getDerivedStatefromProps()
          - render()
          - componentDidMount()
      - Updating phase : when component get updated 
          - getDerivedStatefromProps()
          - getSnapshotBeforeUpdate()
          - shouldComponentUpdate()
          - render()
          -componentDidUpdate()
      - unMounting phase : Removing component from DOM
          - componentWillUnmount()
      - difference btwn class based and Function based components
          Class based components
              1. using class to create, render method must return JSX
              2. stateful components
              3. Hook are not used
              4. need Constructor to initialize
              5. Life cycle methods are available

          Function based component
              1. Using JS pure function and return JSX
              2. Stateless Components
              3. Hooks are used
              4.  No need of constructor
              5. Life cycle methods not available

5. Data sharing between react components
  - Data can be shared from parent to child : use "props" object
6. props : is a property of component. it is an object used to transfer data from parent component to child component. parent data can be shared via child attribute. to access parent data in child we have to use "props". props used in the child component as function argument.
7. Conditional Rendering : Used based on condition rendering jsx elements in browser, using if-else statements(ternary operator ?:) / if statement(&& operator)
8. List in react : use the map Array method. set key attribute to duplicating jsx element in a List
9. CSS styling in react : different ways to apply css in jsx elements
  - inline css : use style attribute to apply style tojsx element, style must be as js object
    - syntax : style ={{cssproperty:value.....}}
    - External CSS : Define css style in an external css file. Link css file to component file using import statement. we cannot import css file into a variable in component file.
    - Module file : file with extension.module.css is known as "module file" in this we have to define style in css. to use module css file we have to import it to component file.
      - Import variable from " module css file path ", to apply style in component, use variablename.className.
    - Important CSS Styling component libraries
        - material UI : 
10. Event Handling in react : syntax: event = {function call}
    - Binding function without arguments : event={functionName}
    - Binding Function with arguments : event={ ()=>functionName(argument)}
    - binding function with arguments as event : event= {(event)=>functionName(event)}
11. state in React : used to store data of a component, when state value changes component will rerender

12. Hooks in React : Predefined Methods in react is known as hooks. used to provide react component features to function based components. to use a hook in a functional component, it has to call the hook.
    - Rules to call hooks in functional component
        - Import hook in component file
        - To use hook in component file call the hok in the top level of component
        - Hooks cannot be conditional
    - Based on react features there are different types of hooks are available.
        - Built in Hooks
              - useState(initial value) hook : used to create state in functional component, this hook will return an array of 2 arguments. FIRST argument will be the state, SECOND argument is the function name used to update state. state updating Function name must start with "set".
              - useEffect(callbackFn, dependency) : uses to apply side effect to the functional component. we can pass side effects in its first arguments as callbackFn, we can also pass an optional dependency argument to decide when to apply side effect in component
                - Dependency different values 
                    - no value: side effect will apply to component all the time, which leads to an infinite loop
                    - empty array: side effect will apply to the component only at the time of loading the component in DOM
                    - [state/props/variable_name]: side effect will apply to the component not only at the time of loading of the component in DOM but also whenever the value of state/props/variable_name given in the dependency changes.
                - useRef(initialvalue) : is a react hook that lets you reference a value that's not needed for rendering. Initial value is optional..it returns an object with "current" key.
        - Custom Hooks : create js file to define a specific function for a specific task. Export the function from that file. function name must start with "use" keyword
13. Form handling in React : there are 2 ways to manage data inside the form by a component.
    - Controlled Components : are component which store data inside its own state
    - Uncontrolled Components : component who access form data using its DOM elements reference.